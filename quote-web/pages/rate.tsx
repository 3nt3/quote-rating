import type { NextPage } from "next";
import Head from "next/head";
import { Fragment, useState } from "react";
import Quote from "../components/quote";
import styles from "../styles/Rate.module.scss";
import { ToastContainer, toast } from "react-toastify";
import { Quote as QuoteModel } from "../models/models";
import camelcaseKeysDeep from "camelcase-keys-deep";
import { TailSpin } from "react-loading-icons";

type Props = {
  quote: QuoteModel | null;
  error: string | null;
};

const Rate = (props: Props) => {
  const [quote, setQuote] = useState<QuoteModel | null>(props.quote);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(props.error);

  return (
    <div className={styles.container}>
      <Head>
        <title>Quote Rating</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        {loading ? (
          <TailSpin />
        ) : quote ? (
          <Fragment>
            <Quote quote={quote} />
            <div>
              <button
                onClick={async () => {
                  try {
                    setLoading(true);
                    setQuote(
                      await (await fetch("http://127.0.0.1:8000/quote")).json()
                    );
                    setLoading(false);
                  } catch (e) {
                    toast(`Error ${e}`);
                  }
                }}
              >
                New quote
              </button>
            </div>{" "}
          </Fragment>
        ) : (
          <div>Error loading quote :(</div>
        )}
      </main>
    </div>
  );
};

export async function getServerSideProps(
  context: any
): Promise<{ props: Props }> {
  let error: string | null = null;
  let quote: QuoteModel | null = null;
  try {
    quote = camelcaseKeysDeep(
      await (await fetch("http://127.0.0.1:8000/quote")).json()
    ) as QuoteModel;
  } catch (e: any) {
    error = e.toString();
  }
  return {
    props: {
      quote,
      error,
    }, // will be passed to the page component as props
  };
}
export default Rate;
